"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["370"],{4650:function(e,n,a){a.r(n),a.d(n,{default:()=>i});var s=a(4246),r=a(980),d=a(7378),t=a(2373);let c=()=>{let[e,n]=(0,d.useState)(!1),a=(0,t.Rb)();return a.watchDarkMode="html",a.onUpdateDark=e=>{console.log("暗黑模式变化:",e),n(e)},(0,d.useEffect)(a.listenDarkMode,[]),(0,s.jsx)("div",{children:(0,s.jsxs)("p",{children:["当前主题：",e?"暗黑":"亮色"]})})};var o=a(357);function h(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",strong:"strong"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"主题监听",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#主题监听",children:"#"}),"主题监听"]}),"\n",(0,s.jsxs)(n.p,{children:["通过监听",(0,s.jsx)(n.code,{children:"html"}),"、",(0,s.jsx)(n.code,{children:"body"}),"元素或某个",(0,s.jsx)(n.code,{children:"ID"}),"元素的",(0,s.jsx)(n.code,{children:"class"}),"属性中是否包含",(0,s.jsx)(n.code,{children:"dark"}),"值的变化，来监听主题变化。"]}),"\n",(0,s.jsxs)(n.h2,{id:"引入",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#引入",children:"#"}),"引入"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import { useDarkModeWatchInstance , darkModeWatchInstance} from '@fairys/admin-tools-react';\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"示例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"}),"示例"]}),"\n",(0,s.jsxs)(o.Z,{isMobile:"false",demoId:"_zh_ui_dark_1",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",meta:"preview",children:"import { useEffect, useState } from 'react'\nimport { darkModeWatchInstance , useDarkModeWatchInstance} from '@fairys/admin-tools-react';\n\nconst Demo = ()=> {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const darkModeWatchInstance = useDarkModeWatchInstance();\n  darkModeWatchInstance.watchDarkMode = 'html';\n  darkModeWatchInstance.onUpdateDark = (darkMode) => {\n    console.log('暗黑模式变化:', darkMode);\n    setIsDarkMode(darkMode);\n  };\n\n  useEffect(darkModeWatchInstance.listenDarkMode,[])\n\n  return (\n    <div>\n      <p>当前主题：{isDarkMode ? '暗黑' : '亮色'}</p>\n    </div>\n  );\n}\n\nexport default Demo\n\n"})}),(0,s.jsx)(c,{})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"实体类"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"/**监听暗黑模式变化实例*/\nexport class DarkModeWatchInstance {\n    onUpdateDark: (darkMode: boolean) => void;\n    /**\n     * 监听暗黑模式变化的class属性\n     * */\n    darkDOM: React.RefObject<HTMLElement | HTMLDivElement>;\n    /**\n     * 监听暗黑模式变化的方式\n     * - prefers-color-scheme: 监听系统暗黑模式变化\n     * - html: 监听html元素的 class 变化\n     * - body: 监听body元素的 class 变化\n     * - string: 监听指定ID标签的 class 变化\n     * */\n    watchDarkMode: 'html' | 'body' | 'prefers-color-scheme' | string;\n    /**监听暗黑模式变化*/\n    listenDarkMode: () => () => void;\n}\n"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(h,e)})):h(e)}let i=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["zh%2Fui%2Fdark.md"]={toc:[{id:"引入",text:"引入",depth:2},{id:"示例",text:"示例",depth:2}],title:"主题监听",headingTitle:"主题监听",frontmatter:{}}}}]);