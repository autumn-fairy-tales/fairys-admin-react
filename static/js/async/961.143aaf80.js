"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["961"],{6439:function(n,e,t){t.r(e),t.d(e,{default:()=>o});var a=t(4246),s=t(980);function i(n){let e=Object.assign({h1:"h1",a:"a",div:"div",p:"p",code:"code",h2:"h2",strong:"strong",pre:"pre"},(0,s.ah)(),n.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"状态实例",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#状态实例",children:"#"}),"状态实例"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive warning",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"内置状态实例"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsxs)(e.p,{children:["在设置初始状态时，需要在渲染",(0,a.jsx)(e.code,{children:"Layout"}),"和",(0,a.jsx)(e.code,{children:"FairysRoot"}),"组件之前调用"]})})]}),"\n",(0,a.jsxs)(e.h2,{id:"accountdatainstance-账号信息",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#accountdatainstance-账号信息",children:"#"}),"accountDataInstance 账号信息"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前登录用户的账号信息，包括用户名、用户头像、用户邮箱、用户手机号、用户角色等。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { accountDataInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"状态值"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"interface AccountDataState {\n  /**用户名*/\n  userName?: string;\n  /**用户头像*/\n  userAvatar?: string;\n  /**用户邮箱*/\n  userEmail?: string;\n  /**用户手机号*/\n  userPhone?: string;\n  /**用户角色*/\n  userRole?: string;\n  /**其他自定义信息*/\n  info?: Record<string, any>;\n  /**默认引用值*/\n  __defaultValue?: string;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"export class AccountDataInstance {\n    state: AccountDataState;\n    /**更新数据信息*/\n    updated: (state: AccountDataState) => void;\n    /**清空账户数据*/\n    clear: () => void;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"hooks"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'export  const useAccountData: () => [AccountDataState, AccountDataInstance, AccountDataState["__defaultValue"]];\n'})}),"\n",(0,a.jsxs)(e.h2,{id:"authdatainstance-认证数据",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#authdatainstance-认证数据",children:"#"}),"authDataInstance 认证数据"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前应用的认证数据，包括登录状态、菜单权限、按钮权限、忽略权限等。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { authDataInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"状态值"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"export interface AuthDataState {\n    /**\n     * NoAuth 没权限\n     * Auth 有权限，已进入页面\n     * RequestAuth 加载中权限中\n     * Login 进入登录页面\n     */\n    status: 'NoAuth' | 'Auth' | 'RequestAuth' | 'Login';\n    /**菜单权限*/\n    menusPermissions: string[];\n    /**按钮权限*/\n    btnsPermissions: string[];\n    /**忽略权限(忽略权限不会进行权限判断，不分按钮还是菜单,在判断时始终为true)*/\n    ignorePermissions: string[];\n    /**默认引用值*/\n    __defaultValue?: string;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'export declare class AuthDataInstance {\n    constructor();\n    state: AuthDataState;\n    updatedStatus: (status: AuthDataState["status"]) => void;\n    /**退出登录(需要外部赋值)*/\n    onLogout: () => void;\n    /**内部退出登录*/\n    _onLogout: () => void;\n    /**设置忽略权限*/\n    setIgnorePermissions: (permissions: string[]) => void;\n    /**设置菜单权限*/\n    setMenusPermissions: (permissions: string[]) => void;\n    /**是否有菜单权限*/\n    isMenuAuth: (path: string) => boolean;\n    /**设置按钮权限*/\n    setBtnsPermissions: (permissions: string[]) => void;\n    /**是否有按钮权限*/\n    isBtnAuth: (path: string) => boolean;\n    /**清空数据*/\n    clear: () => void;\n}\n\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"hooks"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'export  const useAuthDataInstance: () => [AuthDataState, AuthDataInstance, AuthDataState["__defaultValue"]];\n'})}),"\n",(0,a.jsxs)(e.h2,{id:"alivecontrollerbaseinstance-页面缓存",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#alivecontrollerbaseinstance-页面缓存",children:"#"}),"aliveControllerBaseInstance 页面缓存"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于缓存当前页面的组件实例。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { aliveControllerBaseInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import type { AliveController } from 'react-activation';\nexport class AliveControllerBase {\n    aliveController: AliveController;\n    /**转换路由值列表*/\n    static convertIdOrNameList: (value: string[]) => string[];\n    /**清空缓存*/\n    clear: () => void;\n    /**删除缓存*/\n    drop: (name: string) => void;\n    /**删除缓存ById*/\n    dropById: (id: string) => void;\n    /**删除缓存Scope*/\n    dropScope: (name: string) => void;\n    /**删除缓存ScopeByIds*/\n    dropScopeByIds: (ids: string[]) => void;\n    /**刷新缓存*/\n    refresh: (name: string) => void;\n    /**刷新缓存ById*/\n    refreshById: (id: string) => void;\n    /**刷新缓存Scope*/\n    refreshScope: (name: string) => void;\n    /**刷新缓存ScopeByIds*/ \n    refreshScopeByIds: (ids: string[]) => void;\n    /**获取缓存节点*/\n    getCachingNodes: () => import(\"react-activation\").CachingNode[];\n}\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"menudatainstance-菜单数据",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#menudatainstance-菜单数据",children:"#"}),"menuDataInstance 菜单数据"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前应用的菜单数据，包括侧边渲染菜单、主菜单、主菜单选中项、展开项、主菜单展开项等。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { menuDataInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"状态值"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"export interface MenuDataInstanceState {\n  /**侧边渲染菜单*/\n  menuItems: MenuItemType[];\n  /**主菜单*/\n  mainMenuItems: MenuItemType[];\n  /**主菜单选中项*/\n  mainMenuItemSelected?: string;\n  /**展开项*/\n  expandItems: MenuItemType[];\n  /**主菜单展开项*/\n  mainExpandItem?: MenuItemType;\n  /**搜索菜单*/\n  searchMenuItems?: MenuItemType[];\n  /**默认引用值*/\n  __defaultValue?: string;\n}\n\nexport interface MenuItemType {\n  /**标题*/\n  title: string;\n  /**路径*/\n  path: string;\n  /**图标*/\n  icon?: string;\n  /**图标属性*/\n  iconProps?: IconProps;\n  /**判断是否主子菜单字段，仅在第一层生效*/\n  isMain?: boolean;\n  /**在left布局中，父级是否显示\n   * @default true\n   */\n  left_isMainShow?: boolean;\n  /**子项菜单*/\n  items?: MenuItemType[];\n  /**是否为固定菜单,(直接固定到tabbar上，不可删除)*/\n  isTabFixed?: boolean;\n  /**排序-固定菜单*/\n  sortTabFixed?: number;\n  /**样式属性*/\n  className?: string;\n  /**是否打开浏览器新窗口*/\n  isOpenNewWindow?: boolean;\n  /**跳转之前触发，返回 false 则不跳转*/\n  onBeforeNavigate?: (item: MenuItemType) => boolean | Promise<boolean>;\n  [x: string]: any;\n}\n\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"export class MenuDataInstance {\n    /**原始整个菜单*/\n    _menuItems: MenuItemType[];\n    /**平铺所有菜单数据*/\n    _flatMenuItems: MenuItemType[];\n    /**地址查找父级路径*/\n    _parentMenuItemMap: Map<string, MenuItemType[]>;\n    /**菜单数据状态*/\n    state: MenuDataInstanceState;\n    /**设置菜单所有数据*/\n    ctor: (items: MenuItemType[]) => void;\n    /**更新主菜单展开项*/\n    updateMainExpandItem: (item?: MenuItemType) => void;\n    /**\n     * 通过path获取菜单对象\n     * 暂不支持 /path/:id 这种动态路由\n     */\n    get_path_menuItem: (path: string) => MenuItemType;\n    /**搜索菜单*/\n    onSearch: (word: string) => void;\n    /**判断是否是父级菜单*/\n    isParentMenuItem: (path: string, location_path: string) => boolean;\n    /**清空展开项*/\n    clearExpandItems: () => void;\n    /**展开项*/\n    onExpandItems: (path: string) => void;\n    /**折叠*/\n    onCollapseItems: (path: string) => void;\n    /**切换展示隐藏*/\n    onToggleItems: (path: string) => void;\n    /**是否展示*/\n    isExpand: (path: string) => boolean;\n    /**更新子菜单显示,和主菜单选中项*/\n    updateChildMenus: (path: string) => void;\n    /**点击主菜单切换*/\n    onMainMenu: (path: string) => void;\n    /**清空*/\n    clear: () => void;\n    /**跳转之前触发，返回 false 则不跳转*/\n    onBeforeNavigate?: (item: MenuItemType) => boolean | Promise<boolean>;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"hooks"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"export const useMenuData: () => [MenuDataInstanceState, MenuDataInstance, string | undefined];\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"routerdatainstance-路由数据",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#routerdatainstance-路由数据",children:"#"}),"routerDataInstance 路由数据"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前应用的路由数据，包括路由配置、路由跳转方法等。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { routerDataInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import type { DataRouter, NavigateFunction, To, NavigateOptions, RouteObject, DOMRouterOpts, MemoryRouterOpts } from 'react-router';\nexport class RouterDataInstance {\n    router: DataRouter | undefined;\n    /**从root挂载的数据*/\n    __navigate: NavigateFunction;\n    /**跳转前回调*/\n    onNavigateBefore: (to: To, next: (to?: To, options?: NavigateOptions) => void) => Promise<boolean>;\n    /**内置跳转方法*/\n    navigate: (to: To | number, options?: NavigateOptions) => Promise<void>;\n    createBrowserRouter: (routes: RouteObject[], opts?: DOMRouterOpts) => DataRouter;\n    createMemoryRouter: (routes: RouteObject[], opts?: MemoryRouterOpts) => DataRouter;\n    createHashRouter: (routes: RouteObject[], opts?: DOMRouterOpts) => DataRouter;\n    /**清空tab项*/\n    clear: () => void;\n}\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"favoritesdatainstance-收藏数据",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#favoritesdatainstance-收藏数据",children:"#"}),"favoritesDataInstance 收藏数据"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前应用的收藏数据，包括收藏的菜单项。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { favoritesDataInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"状态值"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { MenuItemType } from './menu-data';\nexport type FavoritesDataState = {\n    /**列表数据*/\n    dataList?: MenuItemType[];\n    /**默认引用值*/\n    __defaultValue?: string;\n};\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { MenuItemType } from './menu-data';\nexport declare class FavoritesDataInstance {\n    static localStorageKey: string;\n    state: FavoritesDataState;\n    constructor();\n    /**添加*/\n    addItem: (item: MenuItemType) => void;\n    /**移除*/\n    removeItem: (item: MenuItemType) => void;\n    /**清空数据*/\n    clear: () => void;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"hooks"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'export  const useFavoritesData: () => [FavoritesDataState, FavoritesDataInstance, FavoritesDataState["__defaultValue"]];\n'})}),"\n",(0,a.jsxs)(e.h2,{id:"tabbarinstance-页面标签栏",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#tabbarinstance-页面标签栏",children:"#"}),"tabBarInstance 页面标签栏"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前应用的页面标签栏数据，包括标签栏项集合、右侧选择的标签栏项集合、页面是否全屏等。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { tabBarInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"状态值"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import type { MenuItemType } from './menu-data';\nexport interface TabBarItemType extends MenuItemType {\n}\nexport interface TabBarInstanceState {\n    /**tab项集合*/\n    tabBarItems: TabBarItemType[];\n    /**右侧选择的tab项集合,不在可视区域的数据*/\n    dropDownTabBarItems: TabBarItemType[];\n    /**页面是否全屏*/\n    pageFullScreen?: boolean;\n    /**默认引用值*/\n    __defaultValue?: string;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"export class TabBarInstance {\n    state: TabBarInstanceState;\n    /**初始化渲染菜单数据*/\n    ctor: (tabBarItems: MenuItemType[]) => void;\n    /**添加tab项*/\n    addItem: (item: TabBarItemType) => void;\n    /**根据path添加tab项*/\n    add: (path: string) => void;\n    /**删除tab项*/\n    remove: (path: string, isActive: boolean) => void;\n    /**设置页面是否全屏*/\n    onToggleFullScreen: () => void;\n    /**关闭其他标签*/\n    removeOther: (current: number, isActive: boolean) => void;\n    /**移除左侧*/\n    removeLeft: (current: number, isActive: boolean) => void;\n    /**移除右侧*/\n    removeRight: (current: number, isActive: boolean) => void;\n    /**清空tab项*/\n    clear: () => void;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"hooks"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"export const useTabBar: () => [TabBarInstanceState, TabBarInstance, string | undefined];\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"appplugindatainstance-应用插件数据",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#appplugindatainstance-应用插件数据",children:"#"}),"appPluginDataInstance 应用插件数据"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前应用的插件数据，包括工具条右侧插件、头像菜单插件等。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { appPluginDataInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { FairysPopoverMenuItemType } from '../components/popover-menu';\nexport type AppPluginType = {\n    /**工具条右侧插件*/\n    'toolBar-right'?: {\n        /**渲染组件*/\n        render?: React.ReactNode;\n        /**渲染重写函数*/\n        override?: (menus: React.ReactNode[]) => React.ReactNode;\n    };\n    /**头像菜单插件*/\n    'avatar-menus'?: {\n        /**添加菜单项*/\n        menus?: FairysPopoverMenuItemType[];\n        /**重写菜单项*/\n        override?: (menus: FairysPopoverMenuItemType[]) => FairysPopoverMenuItemType[];\n    };\n};\n\nexport class AppPluginDataInstance {\n    /**插件组件*/\n    appPlugins: AppPluginType;\n    /**添加插件*/\n    addPlugin: (plugin: AppPluginType) => void;\n    /**清空数据*/\n    clear: () => void;\n}\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"motionanimationinstance-页面动画",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#motionanimationinstance-页面动画",children:"#"}),"motionAnimationInstance 页面动画"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前应用的页面动画配置，包括页面切换动画、弹窗动画等。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { motionAnimationInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"配置"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import type { MotionNodeAnimationOptions } from 'framer-motion';\ninterface MotionAnimationState {\n    name: string;\n    config: MotionNodeAnimationOptions & {\n        style?: React.CSSProperties;\n        className?: string;\n    };\n}\n\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import type { MotionNodeAnimationOptions } from 'framer-motion';\n/**页面动画配置*/\nexport declare class MotionAnimationInstance {\n    state: MotionAnimationState[];\n    /**扩展动画*/\n    expands: (list: MotionAnimationState[]) => void;\n    /**获取配置*/\n    getAnimationConfig: (name: string) => MotionNodeAnimationOptions & {\n        style?: React.CSSProperties;\n        className?: string;\n    };\n}\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"notificationdatainstance-通知数据",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#notificationdatainstance-通知数据",children:"#"}),"notificationDataInstance 通知数据"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前应用的通知数据，包括通知tab列表、通知列表数据、通知标题等。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { notificationDataInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"状态值"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { IconProps } from '@iconify/react';\nexport type NotificationDataState = {\n    /**通知tab列表*/\n    tabItems?: NotificationTabItemType[];\n    activeKey?: string;\n    /**列表数据(在不分类的时候渲染)*/\n    dataList?: Pick<NotificationItemType, 'type'>[];\n    /**通知标题*/\n    title?: string;\n    /**是否显示图标\n     * @default true\n     */\n    isShowIcon?: boolean;\n    /**默认引用值*/\n    __defaultValue?: string;\n    /**显示数量*/\n    count?: number;\n    /**是否显示更多弹窗*/\n    visibleMoreModal?: boolean;\n};\n\nexport interface NotificationTabItemType {\n    /**tab标题*/\n    title: string;\n    /**tab键*/\n    key: string;\n    /**图标*/\n    icon?: string;\n    /**图标属性*/\n    iconProps?: IconProps;\n    [s: string]: any;\n}\nexport interface NotificationItemType {\n    /**通知id*/\n    id: string;\n    /**通知类型*/\n    type: string;\n    /**通知标题*/\n    title: string;\n    /**通知时间*/\n    date: string;\n    /**通知内容*/\n    content?: string;\n    /**图标*/\n    icon?: string;\n    /**图标属性*/\n    iconProps?: IconProps;\n    [s: string]: any;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'export class NotificationDataInstance {\n    state: NotificationDataState;\n    ctor: (options: {\n        tabItems?: NotificationTabItemType[];\n        title?: string;\n        isShowIcon?: boolean;\n    }) => void;\n    /**更新值 tabs 选项key（外部挂载事件）*/\n    onUpdateActiveKey?: (key: string) => void;\n    /**更新值*/\n    _onUpdateActiveKey: (key: string) => void;\n    /**根据类型获取数据*/\n    getDataType: (type: string) => any;\n    /**根据类型更新数据*/\n    updatedToType: (type: string, data: NotificationItemType[]) => void;\n    /**获取数据*/\n    getDataList: () => Pick<NotificationItemType, "type">[];\n    /**更新列表数据*/\n    updateDataList: (data: NotificationItemType[]) => void;\n    /**点击数据(外部挂载事件)*/\n    onClickItem?: (item: NotificationItemType) => void;\n    /**点击数据*/\n    _onClickItem: (item: NotificationItemType) => void;\n    /**点击查看全部(外部挂载事件)*/\n    onClickMore?: (activeKey: string) => void;\n    /**关闭更多弹窗*/\n    closeMoreModal: () => void;\n    /**点击查看全部*/\n    _onClickMore: () => void;\n    /**清空数据*/\n    clear: () => void;\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"hooks"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'export const useNotificationData: () => [NotificationDataState, NotificationDataInstance, NotificationDataState["__defaultValue"]];\n'})}),"\n",(0,a.jsxs)(e.h2,{id:"settinginstance-设置数据",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#settinginstance-设置数据",children:"#"}),"settingInstance 设置数据"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前应用的设置数据，包括导航栏模式、侧边栏模式、页面切换动画、标签栏等。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { settingInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"状态值"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"/**\n * 1. main_sub_left:左侧主菜单 + 子菜单 + 无头部信息\n * 2. main_left:左侧主菜单 + 移入子菜单展示 + 无头部信息\n * // 3. main_left_sub_all:左侧主菜单 + 移入子菜单展示所有  + 无头部信息\n * 4. main_top_header:顶部菜单 +  移入子菜单展示 + 有头部信息\n * // 5. main_top_sub_all_header:顶部菜单 +  移入子菜单展示所有 + 有头部信息\n * 6. main_top_sub_left_header:顶部主菜单 + 侧边子菜单 + 有头部信息\n * 7. left:不区分主子菜单并且左侧显示 + 无头部信息(用户信息一起移入左侧显示)\n * 8. left_header:不区分主子菜单并且左侧显示 + 有头部信息\n * 9. mobile:移动端布局,不进行区分主子菜单，使用弹框展示，布局使用 `left` 布局\n */\nexport type LayoutMode = 'main_sub_left' | 'main_left' | 'main_top_header' | 'main_top_sub_left_header' | 'left' | 'left_header' | 'mobile';\nexport interface SettingInstanceState {\n    /**是否打开偏好设置*/\n    open?: boolean;\n    /**logo加载地址*/\n    logo?: string;\n    /**项目名*/\n    projectName?: string;\n    /**颜色主题风格*/\n    theme?: 'dark' | 'light';\n    /**自动监听系统的明暗色系*/\n    autoListenSystemTheme?: boolean;\n    /**主题颜色*/\n    themeColor?: string;\n    /**导航栏模式*/\n    layoutMode?: LayoutMode;\n    /**旧的导航栏模式,(用于切换mobile布局时，切换回旧的布局模式)*/\n    _oldLayoutMode?: LayoutMode;\n    /**暗黑导航栏*/\n    darkMenu?: boolean;\n    /**侧边栏模式*/\n    sideMenuMode?: 'open' | 'close';\n    /**页面切换动画*/\n    pageTransitionMode?: '无动画' | '滑动' | '缩放消退' | '闪现' | '淡入淡出' | string;\n    /**标签栏*/\n    /**是否启用标签栏*/\n    enableTabBar?: boolean;\n    /**是否显示图标*/\n    tabBarShowIcon?: boolean;\n    /**标签页双击执行动作*/\n    tabBarDoubleClickAction?: '';\n    /**工具栏*/\n    /**是否启用工具栏*/\n    enableToolBar?: boolean;\n    /**是否启用收藏夹*/\n    enableToolBarFavorites?: boolean;\n    /**收藏夹最多可存储多少个*/\n    favoritesMaxLength?: number;\n    /**面包屑导航*/\n    enableToolBarBreadcrumb?: boolean;\n    /**导航搜索*/\n    enableToolBarSearch?: boolean;\n    /**通知中心*/\n    enableToolBarNotification?: boolean;\n    /**全屏*/\n    enableToolBarFullScreen?: boolean;\n    isFullScreen?: boolean;\n    /**页面刷新*/\n    enableToolBarRefresh?: boolean;\n    /**是否启用页面水印*/\n    enableWatermark?: boolean;\n    /**\n     * 判断屏幕宽度是否是移动端布局\n     * @default 1024\n     */\n    maxWidthScreen?: number;\n    isMobile?: boolean;\n    /**只是默认值，不使用*/\n    __defaultValue?: string;\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'export declare class SettingInstance {\n    static localStorageKey: string;\n    state: SettingInstanceState;\n    constructor();\n    /**初始配置*/\n    initSetting: (state: SettingInstanceState) => void;\n    /**监听系统主题变化*/\n    mediaQueryList: MediaQueryList | null;\n    /**更新文档和body的主题*/\n    setDocumentAndBodyTheme: () => void;\n    /**监听事件更新系统主题*/\n    onListenChangeSystemTheme: (e: MediaQueryListEvent) => void;\n    /**自动监听系统的明暗色系*/\n    autoListenSystemTheme: () => void;\n    /**切换自动监听系统的明暗色系*/\n    onToggleAutoListenSystemTheme: (autoListenSystemTheme: boolean) => void;\n    /**点击设置切换主题*/\n    onToggleTheme: (theme: "light" | "dark" | "system") => void;\n    /**更新主题颜色*/\n    updatedThemeColor: (themeColor: string) => void;\n    /**更新配置*/\n    updated: (state: SettingInstanceState) => void;\n    /**判断是否主子菜单模板*/\n    isMainSubMenuMode: () => boolean;\n    /**切换打开偏好设置*/\n    onToggleOpen: () => void;\n    /**全屏监听*/\n    onFullscreenChange: () => void;\n    addEventListenerFullscreenChange: () => () => void;\n    /**全屏*/\n    onToggleFullScreen: () => Promise<void>;\n    /**监听屏幕变化，用于控制菜单布局*/\n    mediaQueryListScreen: MediaQueryList | null;\n    /**监听屏幕变化，用于控制菜单布局*/\n    onListenChangeScreen: (e: MediaQueryListEvent) => void;\n    /**自动监听屏幕变化，用于控制菜单布局*/\n    autoListenScreen: () => () => void;\n    /**清空*/\n    clear: () => void;\n}\n'})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"hooks"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"export const useSetting: () => [SettingInstanceState, SettingInstance, string | undefined];\n"})}),"\n",(0,a.jsxs)(e.h2,{id:"appdatainstance-应用数据",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#appdatainstance-应用数据",children:"#"}),"appDataInstance 应用数据"]}),"\n",(0,a.jsxs)(e.div,{className:"rspress-directive tip",children:[(0,a.jsx)(e.div,{className:"rspress-directive-title",children:"TIP"}),(0,a.jsx)(e.div,{className:"rspress-directive-content",children:(0,a.jsx)(e.p,{children:"用于存储当前应用的全局数据，包括路由信息、设置信息、菜单信息、标签栏信息、账号信息、运动动画信息、应用插件信息、通知信息、收藏信息等。"})})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"引入"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:"import { appDataInstance } from '@fairys/admin-tools-react';\n"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"实体类"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'import { AliveControllerBase } from \'./alive-controller\';\nimport { AuthDataInstance } from \'./auth-data\';\nimport { FavoritesDataInstance } from \'./favorites-data\';\ndeclare class AppDataInstance {\n    static router: import("./router-data").RouterDataInstance;\n    static setting: import("./setting").SettingInstance;\n    static menu: import("./menu-data").MenuDataInstance;\n    static tabBar: import("./tab-bar").TabBarInstance;\n    static account: import("./account-data").AccountDataInstance;\n    static motionAnimation: import("./motion-animation").MotionAnimationInstance;\n    static appPlugin: import("./app-plugins-data").AppPluginDataInstance;\n    static notification: import("./notification-data").NotificationDataInstance;\n    static favoritesDataInstance: FavoritesDataInstance;\n    /**挂载的AliveController*/\n    aliveController: AliveControllerBase;\n    authDataInstance: AuthDataInstance;\n    /**清空tab项*/\n    clear: () => void;\n}\n'})})]})}function r(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,a.jsx)(e,Object.assign({},n,{children:(0,a.jsx)(i,n)})):i(n)}let o=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["zh%2Fui%2Fcontext.mdx"]={toc:[{id:"accountdatainstance-账号信息",text:"accountDataInstance 账号信息",depth:2},{id:"authdatainstance-认证数据",text:"authDataInstance 认证数据",depth:2},{id:"alivecontrollerbaseinstance-页面缓存",text:"aliveControllerBaseInstance 页面缓存",depth:2},{id:"menudatainstance-菜单数据",text:"menuDataInstance 菜单数据",depth:2},{id:"routerdatainstance-路由数据",text:"routerDataInstance 路由数据",depth:2},{id:"favoritesdatainstance-收藏数据",text:"favoritesDataInstance 收藏数据",depth:2},{id:"tabbarinstance-页面标签栏",text:"tabBarInstance 页面标签栏",depth:2},{id:"appplugindatainstance-应用插件数据",text:"appPluginDataInstance 应用插件数据",depth:2},{id:"motionanimationinstance-页面动画",text:"motionAnimationInstance 页面动画",depth:2},{id:"notificationdatainstance-通知数据",text:"notificationDataInstance 通知数据",depth:2},{id:"settinginstance-设置数据",text:"settingInstance 设置数据",depth:2},{id:"appdatainstance-应用数据",text:"appDataInstance 应用数据",depth:2}],title:"状态实例",headingTitle:"状态实例",frontmatter:{}}}}]);